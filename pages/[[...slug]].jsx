import Head from "next/head";
import Image from "next/image";

import siteSettingsQuery from "../graphql/queries/contentful/siteSettingsQuery";
import pageQuery from "../graphql/queries/contentful/pageQuery";
import pagesQuery from "../graphql/queries/contentful/pagesQuery";

import queryContentful from "../graphql/helpers/queryContentful";

const Page = () => {
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1>
        Welcome to <a href="https://nextjs.org">Next.js!</a>
      </h1>
    </div>
  );
};

export default Page;

const slugToArray = (slug) => {
  if (slug === "/") return [""];
  return slug?.split("/")?.filter((x) => {
    if (!x) return false;
    if (x === "") return false;
    return true;
  });
};

export const getStaticPaths = async () => {
  const allPagesDataReq = await queryContentful(pagesQuery, { type: "page" });
  const allPages = allPagesDataReq.data?.pageCollection?.items || [];

  const paths = allPages?.map((page) => {
    const slug = slugToArray(page.slug);
    return {
      params: {
        slug,
      },
    };
  });

  return {
    paths,
    fallback: "blocking",
  };
};

export const getStaticProps = async (context) => {
  const { preview } = context;
  const { slug: slugArray } = context.params;
  const slug = slugArray ? `/${slugArray?.join("/")}` : "/";

  const pageDataReq = await queryContentful(pageQuery, { slug, preview });
  const pageData = pageDataReq.data?.pageCollection?.items[0];
  const sections = pageData?.sectionsCollection?.items.filter(
    (item) => item !== null
  );

  console.log("pageDataReq", pageDataReq);
  console.log("pageData", pageData);

  const siteSettingsDataReq = await queryContentful(siteSettingsQuery, {
    preview,
  });
  const siteSettingsData =
    siteSettingsDataReq.data?.siteSettingsCollection?.items[0];

  const notFound = pageData ? false : true;

  const props = {
    slug,
    preview: preview || null,
  };

  return {
    props,
    revalidate: 10,
    notFound,
  };
};
